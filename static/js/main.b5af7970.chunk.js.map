{"version":3,"sources":["actionTypes.ts","api/api.ts","store.tsx","components/User/User.tsx","components/CommentList/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["ActionTypes","API_URL","getData","url","a","fetch","response","json","initialState","posts","isLoading","isStarted","query","filterQuery","setLoading","payload","type","store","createStore","state","action","filter","post","id","map","comments","comment","applyMiddleware","thunk","User","person","className","name","email","address","street","suite","city","zipcode","mapDispatchToProps","removeComment","Comment","connect","aria-label","data-name","onClick","body","CommentList","key","removePost","Post","user","title","PostList","postlist","loadPosts","dispatch","Promise","all","then","postsFromApi","usersFromApi","commentsFromApi","preparedPosts","find","userId","postId","setStarted","handleInputChange","value","setFilterQuery","setFilterQueryWithDebounce","useCallback","debounce","filtered","useMemo","filterValue","toLowerCase","includes","disabled","htmlFor","placeholder","onChange","event","target","handleChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5af7970.chunk.js","sourcesContent":["import { Action as ReduxAction } from 'redux';\n\nexport const LOAD_POSTS = 'LOAD_POSTS';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_STARTED = 'SET_STARTED';\nexport const SET_QUERY = 'SET_QUERY';\nexport const SET_FILTER_QUERY = 'SET_FILTER_QUERY';\nexport const REMOVE_POST = 'REMOVE_POST';\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nexport enum ActionTypes {\n  setPosts = 'LOAD_POSTS',\n  setLoading = 'SET_LOADING',\n  setStarted = 'SET_STARTED',\n  setQuery = 'SET_QUERY',\n  setFilterQuery = 'SET_FILTER_QUERY',\n  setRemovePost = 'REMOVE_POST',\n  setRemoveComment = 'REMOVE_COMMENT',\n}\n\nexport interface Action<T extends ActionTypes = ActionTypes, P = null> extends ReduxAction<T> {\n  payload: P;\n}\n\nexport type setPostsAction = Action<ActionTypes.setPosts, PostWithComments[]>;\nexport type setLoadingAction = Action<ActionTypes.setLoading, boolean>;\nexport type setStartedAction = Action<ActionTypes.setStarted, boolean>;\nexport type setQueryAction = Action<ActionTypes.setQuery, string>;\nexport type setFilterQueryAction = Action<ActionTypes.setFilterQuery, string>;\nexport type setRemovePostAction = Action<ActionTypes.setRemovePost, number>;\nexport type setRemoveCommentAction = Action<ActionTypes.setRemoveComment, number>;\n\nexport type Actions = setPostsAction\n| setLoadingAction\n| setStartedAction\n| setQueryAction\n| setFilterQueryAction\n| setRemovePostAction\n| setRemoveCommentAction;\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPosts = (): Promise<Posts> => {\n  return getData(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<Users> => {\n  return getData(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<Comments> => {\n  return getData(`${API_URL}comments`);\n};\n","import {\n  Reducer,\n  createStore,\n  applyMiddleware,\n  Dispatch,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  Actions,\n  LOAD_POSTS,\n  SET_LOADING,\n  SET_STARTED,\n  SET_QUERY,\n  SET_FILTER_QUERY,\n  REMOVE_POST,\n  REMOVE_COMMENT,\n} from './actionTypes';\n\nimport { getPosts, getUsers, getComments } from './api/api';\n\nconst initialState: State = {\n  posts: [],\n  isLoading: false,\n  isStarted: true,\n  query: '',\n  filterQuery: '',\n};\n\nexport const setPosts = (payload: PostWithComments[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const setLoading = (payload: boolean) => ({\n  type: SET_LOADING,\n  payload,\n});\n\nexport const setStarted = (payload: boolean) => ({\n  type: SET_STARTED,\n  payload,\n});\n\nexport const setQuery = (payload: string) => ({\n  type: SET_QUERY,\n  payload,\n});\n\nexport const setFilterQuery = (payload: string) => ({\n  type: SET_FILTER_QUERY,\n  payload,\n});\n\nexport const removePost = (payload: number) => ({\n  type: REMOVE_POST,\n  payload,\n});\n\nexport const removeComment = (payload: number) => ({\n  type: REMOVE_COMMENT,\n  payload,\n});\n\nexport const loadPosts = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(setLoading(true));\n\n    Promise.all([getPosts(), getUsers(), getComments()])\n      .then(([postsFromApi, usersFromApi, commentsFromApi]) => {\n        const preparedPosts = postsFromApi.map(post => ({\n          ...post,\n          user: usersFromApi.find(person => post.userId === person.id) as User,\n          comments: commentsFromApi.filter(comment => post.id === comment.postId) as Comments,\n        }));\n\n        dispatch(setPosts(preparedPosts));\n        dispatch(setLoading(false));\n        dispatch(setStarted(false));\n      });\n  };\n};\n\nexport const handleInputChange = (value: string) => {\n  return (dispatch: Dispatch) => {\n    dispatch(setQuery(value));\n  };\n};\n\nconst todosReducer: Reducer<State, Actions> = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case SET_STARTED:\n      return {\n        ...state,\n        isStarted: action.payload,\n      };\n\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case SET_FILTER_QUERY:\n      return {\n        ...state,\n        filterQuery: action.payload,\n      };\n\n    case REMOVE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.payload),\n      };\n\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        posts: (state.posts as PostWithComments[]).map((post: PostWithComments) => ({\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.payload),\n        })),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(todosReducer, initialState, applyMiddleware(thunk));\n","import React, { FC } from 'react';\nimport './User.css';\n\ninterface Props {\n  person: User;\n}\n\nexport const User: FC<Props> = ({ person }) => {\n  return (\n    <div className=\"user\">\n      <h3 className=\"user__heading\">\n        {person.name}\n      </h3>\n      <p className=\"user__email\">\n        E-mail:\n        <span>\n          {` ${person.email}`}\n        </span>\n      </p>\n      <address className=\"user__address\">\n        <span>\n          street:\n          {` ${person.address.street}`}\n        </span>\n        <span>\n          suite:\n          {` ${person.address.suite}`}\n        </span>\n        <span>\n          city:\n          {` ${person.address.city}`}\n        </span>\n        <span>\n          zipcode:\n          {` ${person.address.zipcode}`}\n        </span>\n      </address>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { removeComment as removeCommentStore } from '../../store';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\ninterface DispatchProps {\n  removeComment: (value: number) => void;\n}\n\nconst CommentTemplate: FC<Props & DispatchProps> = ({ comment, removeComment }) => {\n  return (\n    <div className=\"comment\">\n      <button\n        type=\"button\"\n        className=\"destroy destroy-comment\"\n        aria-label=\"Delete\"\n        data-name={comment.id}\n        onClick={() => removeComment(comment.id)}\n      />\n      <h3 className=\"comment__name\">{comment.name}</h3>\n      <p className=\"comment__email\">{comment.email}</p>\n      <p className=\"comment__text\">{comment.body}</p>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  removeComment: removeCommentStore,\n};\n\nexport const Comment = connect<{}, DispatchProps, Props, State>(\n  null, mapDispatchToProps,\n)(CommentTemplate);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comments;\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <div>\n      {comments.map(comment => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { removePost as removePostStore } from '../../store';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport './Post.css';\n\ninterface Props {\n  post: PostWithComments;\n}\n\ninterface DispatchProps {\n  removePost: (value: number) => void;\n}\n\nconst PostTemplate: FC<Props & DispatchProps> = ({ post, removePost }) => {\n  return (\n    <div className=\"post\">\n      <button\n        type=\"button\"\n        className=\"destroy destroy-post\"\n        aria-label=\"Delete\"\n        data-name={post.id}\n        onClick={() => removePost(post.id)}\n      />\n      <User person={post.user} />\n      <h2 className=\"post__heading\">{post.title}</h2>\n      <p className=\"post__text\">{post.body}</p>\n      <CommentList comments={post.comments} />\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  removePost: removePostStore,\n};\n\nexport const Post = connect<{}, DispatchProps, Props, State>(\n  null, mapDispatchToProps,\n)(PostTemplate);\n","import React, { FC } from 'react';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  postlist: PostWithComments[];\n}\n\nexport const PostList: FC<Props> = ({ postlist }) => {\n  return (\n    <div>\n      {postlist.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n};\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport {\n  loadPosts as loadPostsStore,\n  handleInputChange as handleInputChangeStore,\n  setFilterQuery as setFilterQueryStore,\n} from './store';\nimport { PostList } from './components/PostList/PostList';\nimport './App.css';\n\ninterface OwnProps {\n  posts: PostWithComments[] | [];\n  isLoading: boolean;\n  isStarted: boolean;\n  query: string;\n  filterQuery: string;\n}\n\ninterface DispatchProps {\n  loadPosts: () => void;\n  handleInputChange: (value: string) => void;\n  setFilterQuery: (value: string) => void;\n}\n\nconst App: FC<DispatchProps & OwnProps> = ({\n  posts,\n  isLoading,\n  isStarted,\n  loadPosts,\n  query,\n  handleInputChange,\n  filterQuery,\n  setFilterQuery,\n}) => {\n  const setFilterQueryWithDebounce = useCallback(debounce(setFilterQuery, 1000), []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    handleInputChange(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  const filtered = useMemo<PostWithComments[]>(() => {\n    const filterValue = filterQuery.toLowerCase();\n\n    return posts.filter(post => (\n      post.title.toLowerCase().includes(filterValue)\n      || post.body.toLowerCase().includes(filterValue)\n    ));\n  }, [filterQuery, posts]);\n\n  return (\n    <>\n      {isStarted\n        ? (\n          <button\n            type=\"button\"\n            className=\"button button-load\"\n            disabled={isLoading}\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        ) : (\n          <div className=\"app\">\n            <label htmlFor=\"search-query\" className=\"label\">\n              Search\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  id=\"search-query\"\n                  value={query}\n                  className=\"input\"\n                  placeholder=\"Title and body search\"\n                  onChange={(event) => handleChange(event)}\n                />\n              </div>\n            </label>\n            <PostList postlist={filterQuery ? filtered : posts} />\n          </div>\n        )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  posts: state.posts,\n  isLoading: state.isLoading,\n  isStarted: state.isStarted,\n  query: state.query,\n  filterQuery: state.filterQuery,\n});\n\nconst mapDispatchToProps = {\n  loadPosts: loadPostsStore,\n  handleInputChange: handleInputChangeStore,\n  setFilterQuery: setFilterQueryStore,\n};\n\nexport default connect<OwnProps, DispatchProps, {}, State>(\n  mapStateToProps, mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport 'bulma/css/bulma.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}